AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AllowedLogGroupPrefix:
    Type: "String"
    Default: ""
    Description: "This Lambda created by this template will only look at Log Groups that match this prefix, defaults to all Log Groups"
  CollectionStackName:
    Type: "String"
    Description: "The name of the CloudFormation stack applied from the collection template in https://docs.observeinc.com/en/latest/content/data-ingestion/integrations/aws.html"
  LogGroupExpirationInDays:
    Type: Number
    Default: 365
    AllowedValues:
      - 1
      - 3
      - 7
      - 14
      - 30
      - 90
      - 365
    Description: |
      Expiration to set on the log group for the lambda created by this stack
  LambdaTimeout:
    Type: Number
    Default: 120
    Description: >-
      The amount of time that Lambda allows a function to run before stopping
      it. The maximum allowed value is 900 seconds.
Resources:
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogGroupSubscriberLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt NewLogGroupEventRule.Arn
  NewLogGroupEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Rule to listen for new log groups and start LogGroupSubscriberLambda
      EventPattern:
        source:
          - "aws.logs"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "logs.amazonaws.com"
          eventName:
            - "CreateLogGroup"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt LogGroupSubscriberLambda.Arn
          Id: !Ref LogGroupSubscriberLambda
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: Role for LogGroupSubscriberLambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: SubscribeLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - Effect: Allow
                Action:
                  - "logs:PutSubscriptionFilter"
                  - "logs:DescribeSubscriptionFilters"
                  - "logs:DeleteSubscriptionFilter"
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AllowedLogGroupPrefix}*"
        - PolicyName: PassRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  Fn::ImportValue: !Sub "${CollectionStackName}:logs:role:arn"
  LogGroupSubscriberLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaLogGroup
    Properties:
      FunctionName: !Ref 'AWS::StackName'
      Description: Look at all specified log groups and add/remove subscriptions filters if necessary
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          ALLOWED_LOG_GROUP_PREFIX: !Ref AllowedLogGroupPrefix
          DESTINATION_ARN:
            Fn::ImportValue: !Sub "${CollectionStackName}:firehose:arn"
          DELIVERY_STREAM_ROLE_ARN:
            Fn::ImportValue: !Sub "${CollectionStackName}:logs:role:arn"
          STACK_NAME: !Ref AWS::StackName
      Runtime: python3.9
      Timeout: !Ref LambdaTimeout
      Handler: index.main
      # https://aws.amazon.com/blogs/infrastructure-and-automation/how-to-automatically-subscribe-to-amazon-cloudwatch-logs-groups/
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def modify_subscription(client, is_create, logGroupName, filterName, destinationArn, deliveryRole):
              foundFilters = client.describe_subscription_filters(logGroupName=logGroupName)
              logger.info('log group %s has filters %s', logGroupName, foundFilters)
              filterExists = False
              for f in foundFilters['subscriptionFilters']:
                  if is_create and f['destinationArn'] == destinationArn:
                      return True  # A subscription to this destination ARN already exists
                  if f['filterName'] == filterName:
                    filterExists = True
              if is_create and not filterExists:
                  try:
                      client.put_subscription_filter(logGroupName=logGroupName,
                                                     destinationArn=destinationArn,
                                                     filterName=filterName,
                                                     filterPattern='',
                                                     roleArn=deliveryRole)
                  except Exception as err:
                      logger.error('Error adding subscription to log group %s: %s', logGroupName, err)
                      return False
              if (not is_create) and filterExists:
                  try:
                      client.delete_subscription_filter(logGroupName=logGroupName,
                                                        filterName=filterName)
                  except Exception as err:
                      logger.error('Error removing subscription from log group %s: %s', logGroupName, err)
                      return False
              return True

          def modify_subscriptions(client, is_create, prefix, filterName, destinationArn, deliveryRole):
              paginator = client.get_paginator('describe_log_groups')
              params = {'logGroupNamePrefix': prefix} if len(prefix) > 0 else {}
              successes, total = 0, 0
              for page in paginator.paginate(**params):
                  for lg in page['logGroups']:
                      success = modify_subscription(client, is_create, lg['logGroupName'], filterName, destinationArn, deliveryRole)
                      successes, total = successes+(1 if success else 0), total+1
              return successes > 0 or total == 0

          def main(event, context):
              try:
                  isCfnEvent = 'RequestType' in event
                  prefix = os.environ['ALLOWED_LOG_GROUP_PREFIX']
                  filterName = 'observe-collection-stack-' + os.environ['STACK_NAME']
                  destinationArn = os.environ['DESTINATION_ARN']
                  deliveryRole = os.environ['DELIVERY_STREAM_ROLE_ARN']
                  logger.info('Event: %s', event)
                  client = boto3.client('logs')
                  if isCfnEvent:
                      anySuccesses = False
                      if event['RequestType'] == 'Create':
                          anySuccesses = modify_subscriptions(client, True, prefix, filterName, destinationArn, deliveryRole)
                      elif event['RequestType'] == 'Delete':
                          anySuccesses = modify_subscriptions(client, False, prefix, filterName, destinationArn, deliveryRole)
                      if anySuccesses:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      else:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': 'Error: unable to create subscriptions for any log groups'})
                  else:
                      logGroupName = event['detail']['requestParameters']['logGroupName']
                      if logGroupName.startswith(prefix):
                          modify_subscription(client, True, logGroupName, filterName, destinationArn, deliveryRole)
              except Exception as err:
                  logger.error(err)
                  if isCfnEvent:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': str(err)})
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'AWS::StackName'
      RetentionInDays: !Ref LogGroupExpirationInDays
  InitialLambdaTrigger:
    Type: Custom::InitialLambdaTrigger
    Properties:
      Description: On stack creation, add subscriptions to all existing log groups that match the specified filters. On deletion, remove all subscriptions added by this template.
      ServiceToken: !GetAtt LogGroupSubscriberLambda.Arn
